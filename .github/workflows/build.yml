# name: Build
# on:
#   push:
#     branches:
#       - main
#   pull_request: # Run tests for any PRs.

# jobs:
#   # Step 1: Run SonarCloud Analysis
#   sonarcloud:
#     name: SonarQube Cloud
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: SonarQube Cloud Scan
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           # SONAR_TOKEN: 7f43afbb9e84147d80cacad3e29726a8277b5cd6
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # build-and-test:
  #   needs: sonarcloud
  #   runs-on: ubuntu-latest
  #   steps:SonarQube
  #     # Step 1: Checkout the code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Step 2: Set up Node.js
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     # Step 3: Install dependencies
  #     - name: Install dependencies
  #       run: npm install

  #     # Step 4: Run tests
  #     - name: Run tests
  #       run: npm test

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: sonarcloud  # Ensure this only runs if 'sonarcloud' succeeds
  #   # if: success()      # Additional safety check to ensure prior steps succeeded
  #   if: github.event_name == 'push'
  #   steps:
  #     # Step 1: Checkout the code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Step 2: Deploy to Vercel
  #     - name: Deploy to Vercel
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-args: '--prod'
  #         working-directory: ./
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}

  # # Step 2: Build and Deploy to Vercel (only if SonarCloud passes)
  # vercel:
  #   runs-on: ubuntu-latest
  #   needs: sonarcloud  # Ensure this only runs if 'sonarcloud' succeeds
  #   if: success()      # Additional safety check to ensure prior steps succeeded
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Build Application
  #       run: npx vercel build

  #     - name: Deploy to Vercel
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #       run: npx vercel deploy --prebuilt

  # name: Build
  # on:
  #   push:
  #     branches:
  #       - main
  #   pull_request: # Run tests for any PRs.

  # jobs:
  #   sonarcloud:
  #     name: SonarQube Cloud
  #     runs-on: ubuntu-latest
  #     steps:
  #       # Step 1: Checkout the code
  #       - uses: actions/checkout@v4
  #         with:
  #           fetch-depth: 0  # Shallow clones should be disabled for better analysis relevance

  #       # Step 2: Install dependencies (e.g., jq)
  #       - name: Install jq
  #         run: sudo apt-get install -y jq

  #       # Step 3: Run SonarCloud analysis
  #       - name: SonarQube Cloud Scan
  #         uses: SonarSource/sonarcloud-github-action@master
  #         env:
  #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #       # Step 4: Check Quality Gate Status
  #       - name: Check Quality Gate Status
  #         run: |
  #           # Fetch quality gate status
  #           curl -s -u ${{ secrets.SONAR_TOKEN }}: \
  #             "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Volenday_sample-for-sonar-test" \
  #             | jq -r '.projectStatus.status' > quality_gate_status.txt

  #           # Read and evaluate quality gate status
  #           if [ "$(cat quality_gate_status.txt)" != "OK" ]; then
  #             echo "Quality Gate failed. Failing the workflow."
  #             exit 1
  #           else
  #             echo "Quality Gate passed."
  #           fi
  #         env:
  #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 


name: Build
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  sonarcloud:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check Quality Gate Status
        run: |
          curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Volenday_sample-for-sonar-test" \
            | jq -r '.projectStatus.status' > quality_gate_status.txt
          if [ "$(cat quality_gate_status.txt)" != "OK" ]; then
            echo "Quality Gate failed. Failing the workflow."
            exit 1
          else
            echo "Quality Gate passed."
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # # Prevent deployment on failure
      # - name: Skip Vercel Deployment on Failure
      #   if: failure()  # Only run if the previous steps failed
      #   run: echo "VERCEL_SKIP_DEPLOYMENT=true" >> $GITHUB_ENV

  deployproduction:
    needs: sonarcloud
    name: Deploy Production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
